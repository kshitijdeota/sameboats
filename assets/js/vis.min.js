String.prototype.replaceAll = function(t, e) { return this.replace(new RegExp(t, "g"), e) };
class DataManager {
    constructor() { this.loading = [], this.data = {}, this.idx, this.compiled = {}, this.authors = {}, this.author_names = {}, this.places = {}, this.datasets = ["author_ids", "intersections", "itineraries", "places", "continents"] } load(t) {
        var e = this,
            a = d3.queue();
        this.datasets.forEach(function(t) {
            var e = "/data/" + t + ".json.gz";
            a.defer(d3.xhr, e)
        }), a.await(function(a) {
            if (a) throw a;
            for (var s = 1; s < arguments.length; s++) {
                var i = s - 1;
                e.data[e.datasets[i]] = JSON.parse(arguments[s].responseText)
            }
            var n = t.call(n)
        })
    }
    buildAuthors() {
        var t = this;
        d3.keys(t.data.author_ids).forEach(function(e) { t.authors[t.data.author_ids[e]] = e, t.author_names[e] = t.data.author_ids[e] })
    }
    buildPlaces() { this.places = this.data.places } indexData() {
        var t = this;
        this.buildAuthors(), this.buildPlaces();
        var e = 0;
        for (var a in this.data.itineraries) this.data.itineraries[a].forEach(function(a) {
            var s = t.places[a.PlaceID],
                i = "";
            void 0 !== s && (i = s.PlaceName), t.compiled[e] = { ID: e, Author: t.author_names[a.AuthorID], AuthorID: a.AuthorID, Place: i, StartCitation: a.StartCitation, StartDate: a.StartDate, EndCitation: a.EndCitation, EndDate: a.EndDate, Notes: a.Notes, FullEntry: a }, e++
        });
        this.idx = lunr(function() { for (var e in this.ref("ID"), this.field("Author"), this.field("Place"), this.field("StartCitation"), this.field("EndCitation"), this.field("Notes"), t.compiled) this.add(t.compiled[e]) })
    }
    Search(t) { return this.idx.search(t) } DisplaySearchResults(t) {
        var e = this.Search(t);
        if (0 == e.length) return "<p>No search results found.</p>";
        for (var a = [], s = 0; s < e.length; s++) {
            var i = this.compiled[e[s].ref],
                n = [];
            "" != i.StartDate && n.push(i.StartDate), "" != i.EndDate && n.push(i.EndDate), a.push("<div class='search-result'><div class='term'>" + i.Author + "</div><div class='subhead'>" + i.Place + " (" + n.join(" â€“ ") + ")</div>" + ("" != i.Notes ? "<div class='description'>" + i.Notes + "</div>" : "") + "</div>")
        }
        return a.join("\n")
    }
    getData() { return this.data }
}
class Visualization {
    constructor() {
        this.data = {}, this.mode = 0, this.places = {}, this.authors = {}, this.author_names = {}, this.continents = {}, this.classkey = "visualization", this.initialized = !1;
        var t = this;
        this.dm = new DataManager, this.dm.load(function() { t.init() }), this.width = window.innerWidth, this.height = window.innerHeight, this.ttime = 45
    }
    init() { this.data = this.dm.getData(), this.focus(), this.process_data(), this.setup(), this.generate(), this.intialized = !0 } focus() { d3.select("body").style("position", "absolute"), d3.select("body").style("bottom", "0"), this.width = window.innerWidth, this.height = window.innerHeight } process_data() {
        var t = this;
        t.continents = t.data.continents, t.dm.buildPlaces(), t.places = t.dm.places, t.authors = t.data.author_ids, d3.keys(t.data.author_ids).forEach(function(e) { t.author_names[t.data.author_ids[e]] = e }), t.itineraries = {}, d3.keys(t.authors).forEach(function(e) { t.itineraries[e] || (t.itineraries[e] = []) }), d3.keys(t.data.itineraries).forEach(function(e) { t.data.itineraries[e].forEach(function(e) { t.itineraries[e.AuthorID].push(e) }) }), t.intersections = {}, d3.keys(this.data.intersections).forEach(function(e) { t.intersections[e] = {}, d3.keys(t.data.intersections[e]).forEach(function(a) { t.intersections[e][a.replaceAll("-", "_")] = t.data.intersections[e][a] }) })
    }
    setup() {} generate() { this.tear_down() } tear_down() {}
}
class DateMapController extends Visualization { constructor() { super(), this.range = [new Date(1890, 0, 1), new Date(2010, 0, 1)], this.date_start = this.range[0], this.date_end = this.range[1] } init() { super.init() } setup() { super.setup() } process_data() { super.process_data() } generate() { super.generate() } tear_down() { super.tear_down() } } class Trajectories extends DateMapController {
    constructor() { super(), this.intersections = {}, this.trajectories = {}, this.mode = 2, this.classkey = "trajectories", this.active_authors_t = [], this.ui = new TrajectoriesUI } init() { super.init() } setup() {
        super.setup();
        this.trajectories.map = d3.select(this.ui.dom.trajectories.map.view).append("svg").attr("width", "100%").append("g").attr("class", "viz-container"), d3.select(this.ui.dom.trajectories.authors.list).html(this.ui.generateAuthorList(this)), this.ui.addListSizeClass(this.authors, this.ui.dom.trajectories.authors.list)
    }
    process_data() { super.process_data(), this.trajectories = {} } generate() {
        super.generate();
        var t = this,
            e = !1;
        d3.select(t.ui.dom.trajectories.map.view).select("svg").attr("height", this.height), this[this.classkey].map.on("click", function() { d3.event.stopPropagation(), P() }), d3.select(t.ui.dom[this.classkey].authors.list).selectAll(".author").each(function() {
            d3.select(this).on("click", function() {
                var e = d3.select(this);
                if (e.classed("selected")) {
                    e.classed("selected", !1);
                    var a = t.active_authors_t.indexOf(e.attr("data-key"));
                    a > -1 && t.active_authors_t.splice(a, 1)
                } else e.classed("selected", !0), t.active_authors_t.push(e.attr("data-key"));
                b()
            })
        });
        var a = t.ui.dom[this.classkey].dateslider.offsetWidth,
            s = d3.time.scale().domain(this.range),
            i = d3.svg.axis().orient("right").ticks(10).tickSize(a - 2).tickFormat(function(t) { return new Date(t).getUTCFullYear() }).tickPadding(12),
            n = d3.slider().scale(s).axis(i).value([r(this.range[1]), r(this.range[0])]).orientation("vertical").margin(0).animate(!1).on("slide", function(e, a) {
                var s = a[1] instanceof Date ? a[1] : new Date(a[1]),
                    i = a[0] instanceof Date ? a[0] : new Date(a[0]);
                t.date_start = r(s), t.date_end = r(i), S(), b()
            }).on("slideend", function(t, e) { b() });

        function r(e) { var a = d3.time.scale().domain(s.domain()).range([0, t.height]).nice(d3.time.month); return a.invert(t.height - a(e)) } d3.select(t.ui.dom[this.classkey].dateslider).call(n);
        d3.select(t.ui.dom[this.classkey].dateslider).selectAll("text").attr("transform", "translate(-" + a + ",20)"), S();
        var l, o, c, d, u, h, p, f, v, m, g, _, y, k = d3.geo.mercator().scale(160).translate([.5 * t.ui.dom[this.classkey].map.view.offsetWidth, .5 * t.ui.dom[this.classkey].map.view.offsetHeight]),
            D = d3.geo.path().projection(k),
            w = topojson.feature(t.continents, t.continents.objects.continents);
        var x;

        function A() {
            l = {}, o = {}, c = {}, d = {};
            var e = d3.entries(t.intersections).filter(function(e) { var a = new Date(e.key); return a >= t.date_start && a <= t.date_end });
            for (var a in e.forEach(function(e) {
                    d3.keys(e.value).length > 0 && d3.keys(e.value).forEach(function(a) {
                        var s = 0;
                        e.value[a].forEach(function(e) { t.active_authors_t.indexOf(e.AuthorID) > -1 && s++ }), 0 != s && (l[a] || (l[a] = {}, l[a].figures = {}), e.value[a].forEach(function(s) {
                            (!l[a].figures[s.AuthorID] || l[a].figures[s.AuthorID] > s.Likelihood) && t.active_authors_t.indexOf(s.AuthorID) > -1 && (l[a].figures[s.AuthorID] = s.Likelihood, l[a].info = e.value[a])
                        }))
                    })
                }), d3.keys(l).forEach(function(e) {
                    l[e].lists = {};
                    for (var a = 1; a <= Object.keys(t.authors).length; a++) {
                        var s = "_0" + a.toString();
                        l[e].lists[s] = d3.values(l[e].figures).filter(function(t) { return t === a })
                    }
                }), e.forEach(function(t) { d3.keys(t.value).forEach(function(e) { o[e] || (o[e] = []), t.value[e].forEach(function(t) { 0 === o[e].filter(function(e) { return e.AuthorID === t.AuthorID && e.EndDate === t.EndDate }).length && o[e].push(t) }) }) }), e.forEach(function(t) { d3.keys(t.value).forEach(function(e) { t.value[e].forEach(function(t) { c[t.AuthorID] || (c[t.AuthorID] = []), 0 === c[t.AuthorID].filter(function(e) { return e.PlaceID === t.PlaceID && e.EndDate === t.EndDate }).length && c[t.AuthorID].push(t) }) }) }), c) - 1 == t.active_authors_t.indexOf(a) && delete c[a];
            d3.keys(c).forEach(function(t) { d3.keys(c[t]).forEach(function(e) { c[t][e].PlaceID = c[t][e].PlaceID.replaceAll("-", "_") }) });
            for (var s = 0, i = 0; i < d3.keys(c).length; i++)
                for (var n = 0; n < c[d3.keys(c)[i]].length - 1; n++) c[d3.keys(c)[i]][n].PlaceID_End = c[d3.keys(c)[i]][n + 1].PlaceID, c[d3.keys(c)[i]][n].Likelihood_End = c[d3.keys(c)[i]][n + 1].Likelihood, c[d3.keys(c)[i]][n].tier = s, s = n % 2 * 10;
            d3.keys(l).forEach(function(t) { d[t] || (d[t] = []) }), d3.values(c).forEach(function(t) { t.forEach(function(t) { d[t.PlaceID] || (d[t.PlaceID] = []), d[t.PlaceID_End] || (d[t.PlaceID_End] = []), d[t.PlaceID].push(t), t.PlaceID_End && d[t.PlaceID_End].push(t) }) })
        }

        function E() {
            (g = t[t.classkey].map.selectAll("g.lines_target").data([t])).enter().append("g").classed("lines_target", !0), g.exit().remove(), (_ = g.selectAll("g.lines_g").data(d3.entries(c))).enter().append("g").classed("lines_g", !0), _.attr("class", function(e) { return "lines_g id_" + d3.keys(t.authors).indexOf(e.key) }), _.exit().remove(), (y = _.selectAll("path.line").data(function(t) { return t.value.filter(function(t) { return t.PlaceID_End }) })).enter().append("path").classed("line", !0);
            try {
                y.attr("d", function(e) {
                    var a, s, i = e.PlaceID || e.PlaceID_End,
                        n = e.PlaceID_End || e.PlaceID;
                    void 0 !== t.places[i] && void 0 !== t.places[n] || console.log("There was a problem with the PlaceID " + e.PlaceID), a = k([t.places[i].Long, t.places[i].Lat]);
                    var r = (s = k([t.places[n].Long, t.places[n].Lat]))[0] - a[0],
                        l = s[1] - a[1],
                        o = Math.sqrt((r + e.tier) * (r + e.tier) + (l + e.tier) * (l + e.tier));
                    return "M" + a[0] + "," + a[1] + "A" + o + "," + o + " 0 0,1 " + s[0] + "," + s[1]
                }), y.exit().remove()
            } catch (t) { console.log(t) }
        }

        function I() {
            var a = d3.scale.linear().domain([0, 10]).range([0, 36]);
            (u = t[t.classkey].map.selectAll("g.points_target").data([t])).enter().append("g").classed("points_target", !0), u.exit().remove(), (h = t[t.classkey].map.selectAll("g.points_g").data(d3.entries(l))).enter().append("g").classed("points_g", !0);
            try {
                h.selectAll("text[class='tip']").remove(), h.attr("transform", function(e) { void 0 === t.places[e.key] && console.log("There was a problem with the PlaceID " + e.key); var a = k([t.places[e.key].Long, t.places[e.key].Lat]); return "translate(" + a[0] + "," + a[1] + ")" }).append("text").attr("class", "tip").text(function(e) {
                    var a = [];
                    a.push(t.places[e.key].PlaceName);
                    for (var s = 0; s < e.value.info.length; s++) {
                        var i = [];
                        i.push(t.authors[e.value.info[s].AuthorID] + "<br />"), "" != e.value.info[s].Notes && i.push(" \nNote: " + e.value.info[s].Notes.toString() + "<br />"), "" != e.value.info[s].StartDate && i.push(" \nFrom: " + e.value.info[s].StartDate.toString() + "<br />"), "" != e.value.info[s].EndDate && i.push("\nUntil: " + e.value.info[s].EndDate), a.push(i.join(""))
                    }
                    return a.join("<br />")
                })
            } catch (t) { console.log(t) } h.on("mousemove", function(e) { d3.select(this).transition().duration(t.ttime).attr("transform", function(e) { var a = k([t.places[e.key].Long, t.places[e.key].Lat]); return "translate(" + a[0] + "," + a[1] + ")scale(1.5)" }) }).on("mouseout", function(e) { d3.select(this).transition().duration(t.ttime / 2).attr("transform", function(e) { var a = k([t.places[e.key].Long, t.places[e.key].Lat]); return "translate(" + a[0] + "," + a[1] + ")scale(1)" }) }).on("click", function(a) {
                d3.event.stopPropagation(), P(), a.key !== e.key && (e = a, d3.select(this).classed("focus_point", !0));
                d3.select(this);
                var s = d3.select(this).select("text").text(),
                    i = this.getBoundingClientRect(),
                    n = i.top + window.pageYOffset + 20,
                    r = i.left + window.pageXOffset + 20;
                d3.select(".tooltip").remove(), d3.select(t.ui.dom.trajectories.elem).append("div").attr("class", "tooltip").style({ top: n + "px", left: r + "px", bottom: "auto", right: "auto" }).html(s).on("click", function() { d3.select(this).style({ "animation-direction": "reverse", "animaiton-play-state": "running", "animation-fill-mode": "backwards" }).transition().delay(800).remove() })
            }), h.exit().remove(), (p = h.selectAll("circle.point_back").data(function(t) { return [t.value.lists._01] })).enter().append("circle").classed("point_back", !0), p.attr("cx", 0).attr("cy", 0).attr("r", function(t) { return a(1) }), p.exit().remove(), (m = h.selectAll("circle.point_01").data(function(t) { return [t.value.lists._01] })).enter().append("circle").classed("point_01", !0), m.classed("point", !0).attr("cx", 0).attr("cy", 0).attr("r", function(t) { return a(1) }), m.exit().remove(), (v = h.selectAll("circle.point_02").data(function(t) { return [t.value.lists._02] })).enter().append("circle").classed("point_02", !0), v.classed("point", !0).attr("cx", 0).attr("cy", 0).attr("r", function(t) { return a(1) }), v.exit().remove(), (f = h.selectAll("circle.point_03").data(function(t) { return [t.value.lists._03] })).enter().append("circle").classed("point_03", !0), f.classed("point", !0).attr("cx", 0).attr("cy", 0).attr("r", function(t) { var e = t.length; return a(e) }), f.exit().remove()
        }

        function S() {
            var e = d3.time.format("%b %Y");
            d3.select(t.ui.dom[t.classkey].datestart).html(e(t.date_start)), d3.select(t.ui.dom[t.classkey].dateend).html(e(t.date_end))
        }

        function b() { A(), E(), I() }

        function P() { e = !1, d3.selectAll(".focus_point").classed("focus_point", !1) }(x = this.trajectories.map.append("g").attr("class", "map-container").selectAll("path.map").data([w])).enter().append("path").classed("map", !0), x.attr("d", D), x.exit().remove(), A(), E(), I();
        var j = d3.behavior.zoom().translate([0, 0]).scale(1).scaleExtent([1, 8]).on("zoom", function() { d3.select(t.ui.dom.trajectories.map.view).select("svg").select(".viz-container").attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")") });
        d3.select(".map-container").append("rect").attr("style", "fill: none; pointer-events: all;").attr("width", "100%").attr("height", this.height).call(j)
    }
    tear_down() {
        super.tear_down();
        var t = 1 === this.mode ? 2 : 1;
        d3.select(this.ui.dom[this.classkey].dateslider).selectAll("*").remove(), d3.selectAll(".sidebar_tab.selected").classed("selected", !1), d3.select(".sidebar_tab#sidebar_01").classed("selected", !0), d3.selectAll("._0" + t).style("display", "none"), d3.selectAll("._0" + this.mode).style("display", "block"), this.date_start = this.range[0], this.date_end = this.range[1]
    }
}
class Intersections extends DateMapController {
    constructor() { super(), this.mode = 1, this.classkey = "intersections", this.intersections = {}, this.trajectories = {}, this.ui = new IntersectionsUI } init() { super.init() } setup() {
        super.setup();
        this[this.classkey].map = d3.select(this.ui.dom[this.classkey].map.view).append("svg").attr("width", "100%"), this.svg = d3.select("#container").append("svg").attr("width", this.width)
    }
    process_data() { super.process_data(), this.trajectories = {} } generate() {
        super.generate();
        var t = this,
            e = !1;
        this[this.classkey].map.attr("height", this.height), this[this.classkey].map.on("click", function() { d3.event.stopPropagation(), A(), D() });
        var a = t.ui.dom[this.classkey].dateslider.offsetWidth,
            s = d3.time.scale().domain(this.range),
            i = d3.svg.axis().orient("right").ticks(10).tickSize(a - 2).tickFormat(function(t) { return new Date(t).getUTCFullYear() }).tickPadding(12),
            n = d3.slider().scale(s).axis(i).value([r(this.range[1]), r(this.range[0])]).orientation("vertical").margin(0).animate(!1).on("slide", function(e, a) {
                var s = a[1] instanceof Date ? a[1] : new Date(a[1]),
                    i = a[0] instanceof Date ? a[0] : new Date(a[0]);
                t.date_start = r(s), t.date_end = r(i), w(), x()
            }).on("slideend", function(t, e) { x() });

        function r(e) { var a = d3.time.scale().domain(s.domain()).range([0, t.height]).nice(d3.time.month); return a.invert(t.height - a(e)) } d3.select(t.ui.dom[this.classkey].dateslider).call(n);
        d3.select(t.ui.dom[this.classkey].dateslider).selectAll("text").attr("transform", "translate(-" + a + ",20)"), w();
        var l, o, c, d, u, h, p, f, v, m = d3.geo.mercator().scale(160).translate([.5 * t.ui.dom[this.classkey].map.view.offsetWidth, .5 * t.ui.dom[this.classkey].map.view.offsetHeight]),
            g = d3.geo.path().projection(m),
            _ = topojson.feature(t.continents, t.continents.objects.continents);

        function y() {
            l = {}, o = {};
            var e = d3.entries(t.intersections).filter(function(e) { var a = new Date(e.key); return a >= t.date_start && a <= t.date_end });
            e.forEach(function(t) {
                d3.keys(t.value).length > 0 && d3.keys(t.value).forEach(function(e) {
                    l[e] || (l[e] = {}, l[e].figures = {}), t.value[e].forEach(function(t) {
                        (!l[e].figures[t.AuthorID] || l[e].figures[t.AuthorID] > t.Likelihood) && (l[e].figures[t.AuthorID] = t.Likelihood)
                    })
                })
            }), d3.keys(l).forEach(function(e) {
                l[e].lists = {};
                for (var a = 1; a <= Object.keys(t.authors).length; a++) {
                    var s = "_0" + a.toString();
                    l[e].lists[s] = d3.values(l[e].figures).filter(function(t) { return t === a })
                }
            }), e.forEach(function(t) { d3.keys(t.value).forEach(function(e) { o[e] || (o[e] = []), t.value[e].forEach(function(t) { 0 === o[e].filter(function(e) { return e.AuthorID === t.AuthorID && e.EndDate === t.EndDate }).length && o[e].push(t) }) }) });
            var a = [];
            for (var s in l) Object.keys(l[s].figures).length < 2 && (a.push(s), delete l[s]);
            for (var i in o) a.indexOf(i) > -1 && delete o[i]
        }

        function k() {
            var a = d3.scale.linear().domain([0, 10]).range([0, 36]);
            (c = t.intersections.map.selectAll("g.points_target").data([t])).enter().append("g").classed("points_target", !0), c.exit().remove(), (d = t.intersections.map.selectAll("g.points_g").data(d3.entries(l))).enter().append("g").classed("points_g", !0);
            try { d.attr("transform", function(e) { void 0 === t.places[e.key] && console.log("There was a problem with the PlaceID: " + e.key); var a = m([t.places[e.key].Long, t.places[e.key].Lat]); return "translate(" + a[0] + "," + a[1] + ")" }).append("title").text(function(e) { return t.places[e.key].PlaceName }) } catch (t) { console.log(t) } d.on("click", function(a) {
                d3.event.stopPropagation();
                var s = d3.select(this);
                d.forEach(function(e) { d3.select(this).classed("selected", !1).transition().duration(t.ttime).attr("transform", function(e) { var a = m([t.places[e.key].Long, t.places[e.key].Lat]); return "translate(" + a[0] + "," + a[1] + ")scale(1)" }) }), s.classed("selected", !0).transition().duration(t.ttime).attr("transform", function(e) { var a = m([t.places[e.key].Long, t.places[e.key].Lat]); return "translate(" + a[0] + "," + a[1] + ")scale(1.5)" }), A(), a.key !== e.key && (e = a, d3.select(this).classed("focus_point", !0)), D()
            }), d.exit().remove(), (u = d.selectAll("circle.point_back").data(function(t) { return [t.value.lists._01] })).enter().append("circle").classed("point_back", !0), u.attr("cx", 0).attr("cy", 0).attr("r", function(t) { var e = t.length + this.parentNode.__data__.value.lists._02.length + this.parentNode.__data__.value.lists._03.length; return a(e) }), u.exit().remove(), (f = d.selectAll("circle.point_01").data(function(t) { return [t.value.lists._01] })).enter().append("circle").classed("point_01", !0), f.classed("point", !0).attr("cx", 0).attr("cy", 0).attr("r", function(t) { var e = t.length + this.parentNode.__data__.value.lists._02.length + this.parentNode.__data__.value.lists._03.length; return a(e) }), f.exit().remove(), (p = d.selectAll("circle.point_02").data(function(t) { return [t.value.lists._02] })).enter().append("circle").classed("point_02", !0), p.classed("point", !0).attr("cx", 0).attr("cy", 0).attr("r", function(t) { var e = t.length + this.parentNode.__data__.value.lists._03.length; return a(e) }), p.exit().remove(), (h = d.selectAll("circle.point_03").data(function(t) { return [t.value.lists._03] })).enter().append("circle").classed("point_03", !0), h.classed("point", !0).attr("cx", 0).attr("cy", 0).attr("r", function(t) { var e = t.length; return a(e) }), h.exit().remove()
        }

        function D() {
            var a = d3.scale.linear().domain([0, 3]).range([.5, 1]);
            if (e) {
                d3.select(t.ui.dom[t.classkey].results.title).html(t.places[e.key].PlaceName);
                var s, i, n = o[e.key] || [];
                (s = d3.select(t.ui.dom[t.classkey].results.view).selectAll(".item").data(n)).enter().append("div").classed("item", !0), s.attr("class", function(e) { return "item id_" + d3.keys(t.authors).indexOf(e.AuthorID) }).style("opacity", function(t) { return a(t.Likelihood) }).html(function(e) { return t.authors[e.AuthorID] }), s.exit().remove(), (i = s.selectAll("div.item_date").data(function(t) { return [t] })).enter().append("div").classed("item_date", !0), i.html(function(t) { var e = []; return t.StartDate && e.push(t.StartDate), t.EndDate && e.push(t.EndDate), e.length > 0 ? e.join("&nbsp;â€“&nbsp;") : "" }), i.exit().remove(), t.ui.addListSizeClass(n, t.ui.dom[t.classkey].results.view)
            } else d3.select("#sidebar_title").html(""), d3.select("#sidebar_items").html(""), t.ui.addListSizeClass([], t.ui.dom[t.classkey].results.view)
        }

        function w() {
            var e = d3.time.format("%b %Y");
            d3.select(t.ui.dom[t.classkey].datestart).html(e(t.date_start)), d3.select(t.ui.dom[t.classkey].dateend).html(e(t.date_end))
        }

        function x() { y(), k(), D() }

        function A() { e = !1, d3.selectAll(".focus_point").classed("focus_point", !1) }(v = t[t.classkey].map.selectAll("path.map").data([_])).enter().append("path").classed("map", !0), v.attr("d", g), v.exit().remove(), y(), k(), D()
    }
    tear_down() {
        super.tear_down();
        var t = 1 === this.mode ? 2 : 1;
        this.intersections.map.selectAll("*").remove(), d3.select(this.ui.dom[this.classkey].dateslider).selectAll("*").remove(), d3.selectAll(".sidebar_tab.selected").classed("selected", !1), d3.select(".sidebar_tab#sidebar_01").classed("selected", !0), d3.selectAll("._0" + t).style("display", "none"), d3.selectAll("._0" + this.mode).style("display", "block"), this.date_start = this.range[0], this.date_end = this.range[1]
    }
}
class Itineraries extends Visualization {
    constructor() { super(), this.classkey = "itineraries", this.selectedauthors = [], this.routes = [], this.visHeight = 4 * this.height, this.ui = new ItinerariesUI, this.selectionsw = d3.select(this.ui.dom.itineraries.authors.selections).node().getBoundingClientRect().width } init() { super.init() } focus() { d3.select("body").style("position", "inherit"), d3.select("body").style("bottom", "auto") } setup() {
        var t = this;
        d3.select(t.ui.dom[this.classkey].authors.list).html(t.ui.generateAuthorList(this)), d3.select(t.ui.dom[this.classkey].authors.list).selectAll(".author").each(function() {
            d3.select(this).on("click", function() {
                var e = d3.select(this),
                    a = e.attr("data-key");
                e.classed("selected") ? (e.classed("selected", !1), t.selectedauthors[t.selectedauthors.indexOf(a)] = null) : (t.selectedauthors = [], d3.select(t.ui.dom[t.classkey].authors.list).selectAll(".author").each(function() { d3.select(this).classed("selected", !1) }), t.selectedauthors[0] = a, e.classed("selected", !0)), t.generate()
            })
        })
    }
    generate() {
        super.generate();
        var t = this;
        if (this.tear_down(), 0 != d3.select(t.ui.dom[t.classkey].authors.list).selectAll("a.selected")[0].length) {
            for (var e = [], a = 0; a < this.selectedauthors.length; a++) {
                var s = this.selectedauthors[a],
                    i = t.ui.dom[this.classkey].selections[a].header;
                t.ui.dom[this.classkey].selections[a].view;
                null != s ? (d3.select(i).html(this.authors[s]), this.routes[a] = this.itineraries[s], e = e.concat(this.itineraries[s]), d3.select(t.ui.dom[this.classkey].selections[a].view).append("svg")) : (d3.select(i).html("Select an author"), this.routes[a] = null)
            }
            var n = [],
                r = [];
            d3.keys(t.itineraries).forEach(function(e) { n.push(d3.min(t.itineraries[e], function(t) { return new Date(t.StartDate) })), r.push(d3.max(t.itineraries[e], function(t) { return new Date(t.EndDate) })) });
            var l = d3.min(n),
                o = d3.max(r),
                c = this.visHeight + 16 + d3.select(t.ui.dom[this.classkey].authors.header).node().getBoundingClientRect().height + d3.select(t.ui.dom[this.classkey].selections[0].header).node().getBoundingClientRect().height;
            d3.select(t.ui.dom[this.classkey].authors.selections).style("height", c + "px"), d3.select(t.ui.dom[this.classkey].elem).style("height", c + "px"), d3.select(t.ui.dom[this.classkey].authors.list).style("height", c + "px");
            for (var d = d3.time.scale().domain([l, o]).range([0, this.visHeight]), u = d3.time.scale().domain([l, o]).range([0, this.visHeight]), h = d3.svg.axis().scale(u).orient("left").tickSize(.95 * this.selectionsw, 0).tickPadding(-25).tickFormat(d3.time.format("%Y")), p = 0; p < this.selectedauthors.length; p++) this.generate_route(p, d, h)
        } else d3.select(t.ui.dom[t.classkey].selections[0].header).html("Select an author")
    }
    generate_route(t, e, a) {
        var s = this,
            i = this.selectedauthors[t],
            n = this.routes[t],
            r = s.ui.dom[this.classkey].selections[t].view;
        if (null != n) {
            var l = d3.select(r).select("svg");
            l.attr("height", this.visHeight), d3.select(r).style("height", this.visHeight);
            var o = .5 * this.selectionsw;
            0 == t && l.append("g").attr("id", "itinerary-axis").call(a).call(function(t) { t.style("transform", "translateX(" + o + "px)"), t.selectAll("text").attr("y", 15) });
            var c = l.selectAll("g.route_g").data([i]);
            c.enter().append("g").classed("route_g", !0), c.attr("class", "route_g author_" + t).attr("transform", function(t, e) { return "translate(0,0)" }), c.exit().remove();
            var d = c.selectAll("circle.route_stops").data(n);
            d.enter().append("circle").classed("route_stops", !0), d.attr("cx", 30).attr("cy", function(t, a) { return t.StartDate ? e(new Date(t.StartDate)) : e(new Date(t.EndDate)) }).attr("r", 4).append("text").attr("class", "tip").text(function(t) {
                var e = [],
                    a = [];
                return void 0 === s.places[t.PlaceID] ? e.push["Location information unspecified or missing."] : e.push(s.places[t.PlaceID].PlaceName), "" != t.StartDate && a.push(" \nFrom: " + t.StartDate.toString()), "" != t.StartCitation && a.push(" (" + t.StartCitation.toString() + ")"), "" != t.EndDate && a.push("\nUntil: " + t.EndDate), "" != t.EndDate && a.push(" (" + t.StartCitation.toString() + ")"), e.push(a.join("")), e.join("<br />")
            }), d.on("click", function() {
                d3.select(this);
                var t = d3.select(this).select("text").text(),
                    e = this.getBoundingClientRect(),
                    a = e.top + window.pageYOffset - 10,
                    i = e.left + window.pageXOffset + 50;
                d3.select(".tooltip").remove(), d3.select(s.ui.dom.itineraries.elem).append("div").attr("class", "tooltip").style({ top: a + "px", left: i + "px", bottom: "auto", right: "auto" }).html(t).on("click", function() { d3.select(this).style({ "animation-direction": "reverse", "animaiton-play-state": "running", "animation-fill-mode": "backwards" }).transition().delay(800).remove() })
            }), d.exit().remove()
        }
    }
    route_change(t) {
        var e, a = d3.select("#" + t + "_select").property("value"),
            s = this.author_names[a];
        e = "left" == t ? this.left_svg : this.right_svg;
        var i = this,
            n = 30 * this.height;
        e.attr("height", n);
        var r = [],
            l = [];
        d3.keys(i.itineraries).forEach(function(t) { r.push(d3.min(i.itineraries[t], function(t) { return new Date(t.StartDate) })), l.push(d3.max(i.itineraries[t], function(t) { return new Date(t.EndDate) })) });
        var o = d3.min(r),
            c = d3.max(l),
            d = d3.time.scale().domain([o, c]).range([0, n - 150 - 60]),
            u = e.selectAll("g.route_g").data(s);
        u.enter().append("g").classed("route_g", !0), u.attr("class", "route_g author_" + t).attr("transform", function(t, e) { return "translate(" + e * (i.width / 2) + ",75)" }), u.exit().remove();
        var h = u.selectAll("line.route_line_background").data(i.itineraries[s]);
        h.enter().append("line").classed("route_line_background", !0), h.attr("x1", i.width / 4).attr("y1", function(t, e) { return d(d.domain()[0]) }).attr("x2", i.width / 4).attr("y2", function(t, e) { return d(d.domain()[1]) }), h.exit().remove();
        var p = u.selectAll("text.route_label").data(s);
        p.enter().append("text").classed("route_label", !0), p.attr("x", i.width / 4).attr("y", -30).text(a), p.exit().remove();
        var f = u.selectAll("line.route_line").data(i.itineraries[s]);
        f.enter().append("line").classed("route_line", !0), f.attr("class", "route_line author_" + t).attr("x1", i.width / 4).attr("y1", function(t, e) { return t.StartDate ? d(new Date(t.StartDate)) : d(new Date(t.EndDate)) }).attr("x2", i.width / 4).attr("y2", function(t, e) { return t.EndDate ? d(new Date(t.EndDate)) : d(new Date(t.StartDate)) }), f.exit().remove();
        var v = u.selectAll("line.route_points").data(i.itineraries[s]);
        v.enter().append("line").classed("route_points", !0), v.attr("x1", i.width / 4 - 15).attr("y1", function(t, e) { return t.StartDate ? d(new Date(t.StartDate)) : d(new Date(t.EndDate)) }).attr("x2", i.width / 4 + 45).attr("y2", function(t, e) { return t.StartDate ? d(new Date(t.StartDate)) : d(new Date(t.EndDate)) }), v.exit().remove();
        var m = u.selectAll("circle.route_stops").data(i.itineraries[s]);
        m.enter().append("circle").classed("route_stops", !0), m.attr("cx", i.width / 4 + 45).attr("cy", function(t, e) { return t.StartDate ? d(new Date(t.StartDate)) : d(new Date(t.EndDate)) }).attr("r", 3), m.exit().remove();
        var g = u.selectAll("text.route_point_labels").data(i.itineraries[s]);
        g.enter().append("text").classed("route_point_labels", !0), g.attr("x", i.width / 4 + 60).attr("y", function(t, e) { return (t.StartDate ? d(new Date(t.StartDate)) : d(new Date(t.EndDate))) + 4 }).text(function(t) {
            var e = t.StartDate || "Unknown",
                a = t.EndDate || "Unknown";
            return i.places[t.PlaceID].PlaceName + " (" + e + " to " + a + ")"
        }), g.exit().remove()
    }
    generate_routes() {
        var t = 6 * this.height;
        this.svg.attr("height", t)
    }
    tear_down() { super.tear_down(); for (var t = 0; t < this.selectedauthors.length; t++) d3.select(this.ui.dom[this.classkey].selections[t].view).selectAll("*").remove() }
}
class Search extends Visualization {
    constructor() {
        super();
        this.ui = new SearchUI
    }
    init() {
        super.init();
        var t = this;
        this.dm.indexData(), d3.select(t.ui.dom.searchfield).on("input", function() { this.value.length > 2 && d3.select(t.ui.dom.searchresults).html(t.dm.DisplaySearchResults(this.value)) })
    }
}
d3.selection.prototype.first = function() { return d3.select(this[0][0]) }, d3.selection.prototype.last = function() { var t = this.size() - 1; return d3.select(this[0][t]) };
//# sourceMappingURL=maps/vis.min.js.map