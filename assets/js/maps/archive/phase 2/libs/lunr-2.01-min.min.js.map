{"version":3,"sources":["archive/phase 2/libs/lunr-2.01-min.js"],"names":["global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","root","factory","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","this","message","console","asString","obj","toString","idf","posting","documentCount","documentsWithTerm","fieldName","Object","keys","length","Token","str","metadata","prototype","update","fn","clone","s","tokenizer","undefined","Array","isArray","map","t","toLowerCase","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","push","slice","position","index","Pipeline","_stack","registeredFunctions","create","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","arguments","after","existingFn","newFn","pos","indexOf","splice","before","remove","run","stackLength","i","reduce","memo","token","j","result","concat","runString","reset","toJSON","Vector","elements","_magnitude","insert","insertIdx","val","start","end","pivot","Math","floor","pivotIdx","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","a","b","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","c","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","fromClause","clause","fromFuzzyString","term","editDistance","fromString","stack","node","editsRemaining","noEditNode","char","deletionNode","frame","pop","substitutionNode","insertionNode","transposeNode","charA","charB","wildcardFound","next","prefix","edge","_str","labels","sort","intersect","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","n","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","documentVectors","tokenSet","averageDocumentLength","k1","fields","search","queryString","query","QueryParser","parse","Query","matchingDocuments","queryVector","clauses","terms","usePipeline","m","termTokenSet","expandedTerms","expandedTerm","termIndex","_index","score","boost","k","field","fieldPosting","matchingDocumentRefs","l","documentMetadata","matchData","matchingDocumentRef","MatchData","combine","results","ref","documentVector","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","documentTermFrequencies","documentLengths","_b","_k1","metadataWhitelist","number","doc","docRef","documentTerms","metadataKey","calculateAverageDocumentLengths","documentRefs","numberOfDocuments","allDocumentsLength","documentRef","createDocumentVectors","docRefs","docRefsLength","documentLength","termFrequencies","termsLength","tf","createTokenSet","use","args","unshift","apply","otherMatchData","key","allFields","options","QueryParseError","name","QueryLexer","lexemes","state","lexText","emit","type","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","currentClause","lexemeIdx","parseFieldOrTerm","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parseField","parseTerm","errorMessage","possibleFields","f","join","nextLexeme","parseEditDistance","parseBoost","parseInt","isNaN","define","amd","exports","module"],"mappings":"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AM9J,IAFN4J,EAAK9K,GAGEoL,KAAKT,IAAUI,EAAIK,KAAKT,KAAWK,EAAII,KAAKT,MACjDD,EAAIC,IAiBR,OAZAI,EAAM/K,GADN8K,EAAK7J,GAEEmK,KAAKV,IAAMK,EAAIK,KAAKV,KACzBI,EAAKvK,EACLmK,EAAIA,EAAEW,QAAQP,EAAG,KAKJ,KAAXD,IACFH,EAAIG,EAAQ5G,cAAgByG,EAAEQ,OAAO,IAGhCR,GAGF,SAAUjE,GACf,OAAOA,EAAMlD,OAAOpC,KAIxBG,EAAKyD,SAASI,iBAAiB7D,EAAKQ,QAAS,WAkB7CR,EAAKkK,uBAAyB,SAAUC,GACtC,IAAIC,EAAQD,EAAUlF,OAAO,SAAUC,EAAMmF,GAE3C,OADAnF,EAAKmF,GAAYA,EACVnF,OAGT,OAAO,SAAUC,GACf,GAAIA,GAASiF,EAAMjF,EAAM/D,cAAgB+D,EAAM/D,WAAY,OAAO+D,IAgBtEnF,EAAKO,eAAiBP,EAAKkK,wBACzB,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA,QACA,QACA,QACA,MACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,SAGFlK,EAAKyD,SAASI,iBAAiB7D,EAAKO,eAAgB,kBAqBpDP,EAAKM,QAAU,SAAU6E,GACvB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","file":"../../../../archive/phase 2/libs/lunr-2.01-min.min.js","sourcesContent":["/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.0.1\n * Copyright (C) 2017 Oliver Nightingale\n * @license MIT\n */\n\n(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.0.1\"\n/*!\n * lunr.utils\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf Utils\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf Utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  return (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @returns {lunr.Token[]}\n */\nlunr.tokenizer = function (obj) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(lunr.utils.asString(t).toLowerCase())\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        tokens.push(\n          new lunr.Token (str.slice(sliceStart, sliceEnd), {\n            position: [sliceStart, sliceLength],\n            index: tokens.length\n          })\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n\n    tokens = tokens.reduce(function (memo, token, j) {\n      var result = fn(token, j, tokens)\n\n      if (result === void 0 || result === '') return memo\n\n      return memo.concat(result)\n    }, [])\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str) {\n  var token = new lunr.Token (str)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this._magnitude = 0\n\n  if (this.elements.length == 0) {\n    this.elements.push(insertIdx, val)\n    return\n  }\n\n  var start = 0,\n      end = this.elements.length,\n      sliceLength = end - start,\n      pivot = Math.floor((sliceLength / 2) / 2) * 2,\n      pivotIdx = this.elements[pivot]\n\n  while (sliceLength > 2) {\n    if (pivotIdx == insertIdx) {\n      throw \"duplicate index\"\n    }\n\n    if (insertIdx > pivotIdx) {\n      start = pivot\n    }\n\n    if (insertIdx < pivotIdx) {\n      end = pivot\n    }\n\n    sliceLength = end - start\n    pivot = start + Math.floor((sliceLength / 2) / 2) * 2\n    pivotIdx = this.elements[pivot]\n  }\n\n  if (pivotIdx > insertIdx) {\n    this.elements.splice(pivot, 0, insertIdx, val)\n  }\n\n  if (pivotIdx < insertIdx) {\n    this.elements.splice(pivot + 2, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the cosine similarity between this vector and another\n * vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude())\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2017 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      } else {\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node,\n      wildcardFound = false\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * As soon as a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      wildcardFound = true\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n\n      // TODO: is this needed anymore?\n      if (wildcardFound) {\n        node.edges[\"*\"] = root\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {number} attrs.documentCount - The total number of documents held in the index.\n * @param {number} attrs.averageDocumentLength - The average length of all documents in the index.\n * @param {number} attrs.b - A parameter for the document scoring algorithm.\n * @param {number} attrs.k1 - A parameter for the document scoring algorithm.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.documentVectors = attrs.documentVectors\n  this.tokenSet = attrs.tokenSet\n  this.documentCount = attrs.documentCount\n  this.averageDocumentLength = attrs.averageDocumentLength\n  this.b = attrs.b\n  this.k1 = attrs.k1\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingDocuments = Object.create(null),\n      queryVector = new lunr.Vector\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term)\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term calculate the score as the term relates to the\n         * query using the same calculation used to score documents during\n         * indexing. This score will be used to build a vector space\n         * representation  of the query.\n         *\n         * Also need to discover the terms index to insert into the query\n         * vector at the right position\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index,\n            idf = lunr.idf(posting, this.documentCount),\n            tf = 1,\n            score = idf * ((this.k1 + 1) * tf) / (this.k1 * (1 - this.b + this.b * (query.clauses.length / this.averageDocumentLength)) + tf)\n\n        /*\n         * Inserting the found query term, along with its term index\n         * into the vector representing the query. It is here that\n         * any boosts are applied to the score. They could have been\n         * applied when calculating the score above, but that expression\n         * is already quite busy.\n         */\n        queryVector.insert(termIndex, score * clause.boost)\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting)\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                documentMetadata, matchData\n\n            documentMetadata = fieldPosting[matchingDocumentRef]\n            matchData = new lunr.MatchData (expandedTerm, field, documentMetadata)\n\n            if (matchingDocumentRef in matchingDocuments) {\n              matchingDocuments[matchingDocumentRef].combine(matchData)\n            } else {\n              matchingDocuments[matchingDocumentRef] = matchData\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n  var matchingDocumentRefs = Object.keys(matchingDocuments),\n      results = []\n\n  for (var i = 0; i < matchingDocumentRefs.length; i++) {\n    /*\n     * With all the matching documents found they now need\n     * to be sorted by their relevance to the query. This\n     * is done by retrieving the documents vector representation\n     * and then finding its similarity with the query vector\n     * that was constructed earlier.\n     *\n     * This score, along with the document ref and any metadata\n     * we collected into a lunr.MatchData instance are stored\n     * in the results array ready for returning to the caller\n     */\n    var ref = matchingDocumentRefs[i],\n        documentVector = this.documentVectors[ref],\n        score = queryVector.similarity(documentVector)\n\n    results.push({\n      ref: ref,\n      score: score,\n      matchData: matchingDocuments[ref]\n    })\n  }\n\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var documentVectors = Object.keys(this.documentVectors)\n    .map(function (ref) {\n      return [ref, this.documentVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    averageDocumentLength: this.averageDocumentLength,\n    b: this.b,\n    k1: this.k1,\n    fields: this.fields,\n    documentVectors: documentVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      documentVectors = {},\n      serializedVectors = serializedIndex.documentVectors,\n      documentCount = 0,\n      invertedIndex = {},\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++, documentCount++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    documentVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.b = serializedIndex.b\n  attrs.k1 = serializedIndex.k1\n  attrs.fields = serializedIndex.fields\n  attrs.averageDocumentLength = serializedIndex.averageDocumentLength\n\n  attrs.documentCount = documentCount\n  attrs.documentVectors = documentVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = []\n  this.invertedIndex = Object.create(null)\n  this.documentTermFrequencies = {}\n  this.documentLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * @param {string} field - The name of a field to index in all documents.\n */\nlunr.Builder.prototype.field = function (field) {\n  this._fields.push(field)\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * @param {object} doc - The document to add to the index.\n */\nlunr.Builder.prototype.add = function (doc) {\n  var docRef = doc[this._ref],\n      documentTerms = {}\n\n  this.documentCount += 1\n  this.documentTermFrequencies[docRef] = documentTerms\n  this.documentLengths[docRef] = 0\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var fieldName = this._fields[i],\n        field = doc[fieldName],\n        tokens = this.tokenizer(field),\n        terms = this.pipeline.run(tokens)\n\n    // store the length of this field for this document\n    this.documentLengths[docRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (documentTerms[term] == undefined) {\n        documentTerms[term] = 0\n      }\n\n      documentTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < this._fields.length; k++) {\n          posting[this._fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageDocumentLengths = function () {\n\n  var documentRefs = Object.keys(this.documentLengths),\n      numberOfDocuments = documentRefs.length,\n      allDocumentsLength = 0\n\n  for (var i = 0; i < numberOfDocuments; i++) {\n    var documentRef = documentRefs[i]\n    allDocumentsLength += this.documentLengths[documentRef]\n  }\n\n  this.averageDocumentLength = allDocumentsLength / numberOfDocuments\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createDocumentVectors = function () {\n  var documentVectors = {},\n      docRefs = Object.keys(this.documentTermFrequencies),\n      docRefsLength = docRefs.length\n\n  for (var i = 0; i < docRefsLength; i++) {\n    var docRef = docRefs[i],\n        documentLength = this.documentLengths[docRef],\n        documentVector = new lunr.Vector,\n        termFrequencies = this.documentTermFrequencies[docRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf = lunr.idf(this.invertedIndex[term], this.documentCount),\n          score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (documentLength / this.averageDocumentLength)) + tf)\n\n      documentVector.insert(termIndex, score)\n    }\n\n    documentVectors[docRef] = documentVector\n  }\n\n  this.documentVectors = documentVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @private\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageDocumentLengths()\n  this.createDocumentVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    documentVectors: this.documentVectors,\n    tokenSet: this.tokenSet,\n    averageDocumentLength: this.averageDocumentLength,\n    documentCount: this.documentCount,\n    fields: this._fields,\n    pipeline: this.searchPipeline,\n    b: this._b,\n    k1: this._k1\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @property {object} metadata - A collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  this.metadata = {}\n  this.metadata[term] = {}\n  this.metadata[term][field] = metadata\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = {}\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = {}\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} boost - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * @param {string} term - The term to add to the query.\n * @param {Object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.term = function (term, options) {\n  var clause = options || {}\n  clause.term = term\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.str.slice(this.start, this.pos),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos == this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // TODO: there may be more separators we want to consider\n    if (char == \" \") {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseFieldOrTerm\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseFieldOrTerm = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type + \" with value '\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting a field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n\n"]}